{"version":3,"sources":["components/EntryForm.tsx","components/Message.tsx","connect-socket.ts","components/ChatRoom.tsx","reducer.js","pages/Chat.tsx","App.tsx","index.tsx"],"names":["EntryForm","onLogin","useState","roomId","setRoomId","userName","setUserName","handleEnter","a","alert","roomObj","axios","post","className","placeholder","type","value","onChange","e","target","onClick","Message","textMessage","socket","io","ChatRoom","users","messages","addMessage","messageText","setMessageText","messagesRef","useRef","useEffect","current","scrollTo","length","map","user","ref","message","text","emit","state","action","isJoined","payload","console","log","Chat","useReducer","reducer","dispatch","get","res","data","on","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2fc3a38e.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nexport type RoomObjType = {\r\n\troomId: string,\r\n\tuserName: string\r\n}\r\ntype propsType = {\r\n\tonLogin: (roomObj: RoomObjType) => void\r\n}\r\nconst EntryForm: React.FC<propsType> = function ({ onLogin }) {\r\n\tconst [ roomId, setRoomId ] = useState<string>(\"\");\r\n\tconst [ userName, setUserName ] = useState<string>(\"\");\r\n\r\n\tconst handleEnter = async () => {\r\n\t\tif (!roomId || !userName) {\r\n\t\t\talert(\"Неверные данные\");\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tconst roomObj: RoomObjType = {\r\n\t\t\troomId,\r\n\t\t\tuserName\r\n\t\t};\r\n\t\tawait axios.post(\"rooms\", roomObj);\r\n\t\tonLogin(roomObj);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<form className=\"entry-form\">\r\n\t\t\t<div className=\"entry-form__header\">\r\n\t\t\t\tВойти в чат\r\n\t\t\t</div>\r\n\t\t\t<div className=\"entry-form__input-container\">\r\n\t\t\t\t<input\r\n\t\t\t\t\tplaceholder=\"Введите id комнаты\"\r\n\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\tclassName=\"entry-form__input\"\r\n\t\t\t\t\tvalue={roomId}\r\n\t\t\t\t\tonChange={(e) => setRoomId(e.target.value)}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"entry-form__input-container\">\r\n\t\t\t\t<input\r\n\t\t\t\t\tplaceholder=\"Введите имя пользователя\"\r\n\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\tclassName=\"entry-form__input\"\r\n\t\t\t\t\tvalue={userName}\r\n\t\t\t\t\tonChange={(e) => setUserName(e.target.value)}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t\t<button\r\n\t\t\t\tclassName=\"entry-form__enter-button\"\r\n\t\t\t\tonClick={handleEnter}\r\n\t\t\t\ttype=\"button\"\r\n\t\t\t>\r\n\t\t\t\tВойти\r\n\t\t\t</button>\r\n\t\t</form>\r\n\t);\r\n};\r\n\r\nexport default EntryForm;","import React from \"react\";\r\n\r\ntype MessagePropsType = {\r\n\tuserName: string,\r\n\ttextMessage: string\r\n}\r\nconst Message: React.FC<MessagePropsType> = function ({userName, textMessage}) {\r\n\treturn (\r\n\t\t<div className=\"chat-body__message chat-message\">\r\n\t\t\t<div className=\"chat-message__header message-header\">\r\n\t\t\t\t<span className=\"message-header__user-name\">\r\n\t\t\t\t\t{userName}\r\n\t\t\t\t</span>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"chat-message__text\">\r\n\t\t\t\t{textMessage}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Message;","import io from \"socket.io-client\";\r\nexport const socket = io(\"http://localhost:9999\");\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport Message from \"./Message\";\r\nimport { socket } from \"../connect-socket\";\r\n\r\ntype ChatRoomPropsType = {\r\n\tuserName: string,\r\n\tusers: string[],\r\n\troomId: string,\r\n\tmessages: any[],\r\n\taddMessage: (message: any) => void,\r\n}\r\n\r\nconst ChatRoom: React.FC<ChatRoomPropsType> = function ({ users, roomId, messages, userName, addMessage }) {\r\n\tconst [ messageText, setMessageText ] = useState<string>(\"\");\r\n\r\n\tconst messagesRef = useRef<any>();\r\n\r\n\tuseEffect(() => {\r\n\t\tmessagesRef.current.scrollTo(0, 99999);\r\n\t}, [ messages ]);\r\n\r\n\tconst onSendMessage = () => {\r\n\t\tsocket.emit(\"ROOM:NEW_MESSAGE\", {\r\n\t\t\troomId,\r\n\t\t\tuserName,\r\n\t\t\ttext: messageText\r\n\t\t});\r\n\t\tsetMessageText(\"\");\r\n\t\taddMessage({\r\n\t\t\troomId,\r\n\t\t\tuserName,\r\n\t\t\ttext: messageText\r\n\t\t});\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className=\"chat-room\">\r\n\t\t\t<div className=\"chat-room__side-panel side-panel\">\r\n\t\t\t\t<div className=\"side-panel__room-name\">\r\n\t\t\t\t\tКомната: <span>{roomId}</span>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"side-panel__online-count\">\r\n\t\t\t\t\t<div className=\"side-panel__online-count-header\">\r\n\t\t\t\t\t\tОнлайн <span>{users.length}</span>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t{users.map((user) => (\r\n\t\t\t\t\t\t<div className=\"side-panel__user\">\r\n\t\t\t\t\t\t\t{user}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t))}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"chat-room__chat-body chat-body\">\r\n\t\t\t\t<div className=\"chat-body__messages\" ref={messagesRef}>\r\n\t\t\t\t\t{messages.map((message) => <Message userName={message.userName} textMessage={message.text}/>)}\r\n\t\t\t\t</div>\r\n\t\t\t\t<form className=\"chat-body__create-message-form create-message-form\">\r\n\t\t\t\t\t<textarea\r\n\t\t\t\t\t\tclassName=\"create-message-form__textarea\"\r\n\t\t\t\t\t\tonChange={(e) => setMessageText(e.target.value)}\r\n\t\t\t\t\t\tvalue={messageText}/>\r\n\t\t\t\t\t<button\r\n\t\t\t\t\t\ttype=\"button\"\r\n\t\t\t\t\t\tclassName=\"create-message-form__send-button\"\r\n\t\t\t\t\t\tonClick={onSendMessage}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tОтравить\r\n\t\t\t\t\t</button>\r\n\t\t\t\t</form>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default ChatRoom;","export default (state, action) => {\r\n\tswitch (action.type) {\r\n\t\tcase 'SET_IS_JOINED':\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tisJoined: !!action.payload,\r\n\t\t\t\tuserName: action.payload.userName,\r\n\t\t\t\troomId: action.payload.roomId\r\n\t\t\t}\r\n\t\tcase 'SET_USERS':\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tusers: action.payload\r\n\t\t\t}\r\n\t\tcase 'SET_MESSAGES':\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tmessages: action.payload\r\n\t\t\t}\r\n\t\tcase 'ADD_MESSAGE':\r\n\t\t\tconsole.log('action', action.payload);\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tmessages: [...state.messages, action.payload]\r\n\t\t\t}\r\n\t\tdefault:\r\n\t\t\treturn {...state}\r\n\t}\r\n}","import React, { useEffect, useReducer, useRef, useState } from \"react\";\r\nimport EntryForm, { RoomObjType } from \"../components/EntryForm\";\r\nimport \"../style.scss\";\r\nimport ChatRoom from \"../components/ChatRoom\";\r\nimport reducer from \"../reducer\";\r\nimport { socket } from \"../connect-socket\";\r\nimport axios from \"axios\";\r\n\r\nconst Chat: React.FC = function () {\r\n\tconst [ state, dispatch ] = useReducer(reducer, {\r\n\t\tisJoined: false,\r\n\t\tuserName: \"\",\r\n\t\troomId: \"\",\r\n\t\tusers: [],\r\n\t\tmessages: []\r\n\t});\r\n\r\n\r\n\tconst onLogin = async (roomObj: RoomObjType) => {\r\n\t\t// @ts-ignore\r\n\t\tdispatch({\r\n\t\t\ttype: \"SET_IS_JOINED\",\r\n\t\t\tpayload: roomObj\r\n\t\t});\r\n\t\tsocket.emit(\"ROOM:JOIN\", roomObj);\r\n\t\tconst res = await axios.get(`room/${roomObj.roomId}`);\r\n\t\t// @ts-ignore\r\n\t\tdispatch({\r\n\t\t\ttype: \"SET_USERS\",\r\n\t\t\tpayload: res.data.users\r\n\t\t});\r\n\t\t// @ts-ignore\r\n\t\tdispatch({\r\n\t\t\ttype: \"SET_MESSAGES\",\r\n\t\t\tpayload: res.data.messages\r\n\t\t});\r\n\t};\r\n\tconst addMessage = (message: any) => {\r\n\t\t// @ts-ignore\r\n\t\tdispatch({\r\n\t\t\ttype: \"ADD_MESSAGE\",\r\n\t\t\tpayload: message\r\n\t\t});\r\n\t};\r\n\r\n\tuseEffect(() => {\r\n\t\tsocket.on(\"ROOM:JOINED\", (users) => {\r\n\t\t\t// @ts-ignore\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: \"SET_USERS\",\r\n\t\t\t\tpayload: users\r\n\t\t\t});\r\n\t\t});\r\n\t\tsocket.on(\"ROOM:LEAVE\", (users) => {\r\n\t\t\t// @ts-ignore\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: \"SET_USERS\",\r\n\t\t\t\tpayload: users\r\n\t\t\t});\r\n\t\t});\r\n\t\tsocket.on(\"ROOM:ADD_NEW_MESSAGE\", (message) => {\r\n\t\t\taddMessage(message);\r\n\t\t});\r\n\t}, []);\r\n\r\n\treturn (\r\n\t\t<main className=\"chat\">\r\n\t\t\t{state.isJoined\r\n\t\t\t\t? <ChatRoom\r\n\t\t\t\t\tusers={state.users}\r\n\t\t\t\t\troomId={state.roomId}\r\n\t\t\t\t\tmessages={state.messages}\r\n\t\t\t\t\tuserName={state.userName}\r\n\t\t\t\t\taddMessage={addMessage}\r\n\t\t\t\t/>\r\n\t\t\t\t: <EntryForm onLogin={onLogin}/>\r\n\t\t\t}\r\n\t\t</main>\r\n\t);\r\n};\r\n\r\nexport default Chat;","import Chat from \"./pages/Chat\";\nimport React from \"react\";\n\nfunction App() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<Chat />\n\t\t</div>\n\t);\n}\n\nexport default App;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App/>\n\t</React.StrictMode>,\n\tdocument.getElementById(\"root\")\n);\n"],"sourceRoot":""}